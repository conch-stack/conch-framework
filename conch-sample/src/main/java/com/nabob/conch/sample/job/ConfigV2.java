package com.nabob.conch.sample.job;

import lombok.extern.slf4j.Slf4j;
import org.springframework.aop.support.AopUtils;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.BeanFactory;
import org.springframework.beans.factory.BeanFactoryAware;
import org.springframework.beans.factory.config.BeanPostProcessor;
import org.springframework.beans.factory.support.AbstractBeanFactory;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.context.ApplicationListener;
import org.springframework.context.event.ContextRefreshedEvent;
import org.springframework.core.MethodIntrospector;
import org.springframework.core.annotation.AnnotationUtils;

import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * @author Adam
 * @since 2025/1/22
 */
@Slf4j
public class ConfigV2 implements BeanPostProcessor, ApplicationContextAware, BeanFactoryAware, ApplicationListener<ContextRefreshedEvent> {

    private ApplicationContext context;
    private AbstractBeanFactory beanFactory;

    private static final Set<Method> registeredMethods = new HashSet<>();

    // <topic,反射配置Bean>
    private Map<String, ConfigBean> configMap = new HashMap<>();

    public Map<String, ConfigBean> getConfigMap() {
        return configMap;
    }


    @Override
    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
        return bean;
    }

    @Override
    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
        // resolve dynamic proxy class generated by spring aop
        Class<?> targetClass = AopUtils.getTargetClass(bean);
        Map<Method, QmqConsumer> consumerMethods = MethodIntrospector.selectMethods(targetClass,
                (MethodIntrospector.MetadataLookup<QmqConsumer>) method -> {
                    if (registeredMethods.contains(method)) {
                        return null;
                    }

                    QmqConsumer qmqConsumer = AnnotationUtils.findAnnotation(method, QmqConsumer.class);
                    if (qmqConsumer == null) {
                        return null;
                    }

                    if (!Modifier.isPublic(method.getModifiers())) {
                        throw new RuntimeException("The method annotated with QmqConsumer must be public.");
                    }

                    String methodName = method.getName();
                    Class<?>[] args = method.getParameterTypes();
                    String message = String.format("For message listener, the method must has exactly one parameter which is in [qunar.tc.qmq.Message,qunar.tc.qmq.BatchMessage], class: %s method:%s", beanName, methodName);
                    if (args.length != 1) {
                        log.error(message);
                        throw new RuntimeException(message);
                    }
                    if (args[0] != String.class) {
                        log.error(message);
                        throw new RuntimeException(message);
                    }
                    return qmqConsumer;
                });

        consumerMethods.forEach((originMethod, qmqConsumer) -> {
//                    registerConsumer(bean, resolveRootMethod(originMethod), consumer);
                    registeredMethods.add(originMethod);
                    configMap.put(qmqConsumer.topic(), new ConfigBean(bean, originMethod));
                });

        return bean;
    }

    /**
     * Determine whether the current application is running as a native image.
     * <p>
     * Reference: <a href="https://github.com/spring-projects/spring-framework/blob/main/spring-core/src/main/java/org/springframework/core/NativeDetector.java#L33">NativeDetector in spring-core</a>
     *
     * @return whether the current application is running as a native image
     */
    private static boolean inNativeImage() {
        return System.getProperty("org.graalvm.nativeimage.imagecode") != null;
    }

    @Override
    public void setBeanFactory(BeanFactory beanFactory) throws BeansException {
        if (beanFactory instanceof AbstractBeanFactory) {
            this.beanFactory = (AbstractBeanFactory) beanFactory;
        }
    }

    @Override
    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
        this.context = applicationContext;
    }

    @Override
    public void onApplicationEvent(ContextRefreshedEvent event) {
//        synchronized (registerLock) {
//            if (refreshed.compareAndSet(false, true)) {
//                scannedListenerHolders.forEach(ListenerHolder::register);
//            }
//        }
    }
}
